getSorted <- function(df, sortAlpha){
if (doDebug) print("getSorted ")
print(nrow(df))
print(names(df))
if (sortAlpha)
data <- unique(sort(df$name))
else {
df <- aggregate(df[c("prop")],  by=df[c("name")], FUN="mean")
data <- df[order(df$prop,df$name,decreasing=T),]$name
}
return(data)
}
parseNames <-
function(theSex,
startYear,
endYear,
theLetters) {
if (doDebug) print("parsenames ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
#aggregate by year (exact match)
return(df3)
}
parseFreq <-
function(theSex,
startYear,
endYear,
theName) {
if (doDebug) print("parseFreq ")
#sex
df <- babynames#[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#print(nrow(df2))
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == tolower(theName), ]
df6 <- aggregate(df5["prop"], by = df5[c("year","sex")], FUN = "mean")
return(df6)
}
lookupOneName <-function(theLookup, df){
if (doDebug) print("lookupOneName ")
df$rank <- perc.rank(df$prop)
theName <- df[df$name==theLookup,]
theProp <- theName$prop*100
print(theProp)
return(theProp)
}
#http://stats.stackexchange.com/questions/11924/computing-percentile-rank-in-r
#perc.rank <- function(x) trunc(rank(x))/length(x)
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
freq
freq
freq[freq$sex==theSex]
freq[freq$sex==theSex,]
df <- freq[freq$sex==theSex,]
df
df2 <- select(df, -c(sex))
df2 <- df[, -c(sex)]
df2 <- df[, -c("sex")]
df2 <- df[, -"sex"]
df2 <- df[, -sex]
names(df)
df2 <- df[, -2]
names(df)
names(df2)
getSex <- function(freq, theSex){
df <- freq[freq$sex==theSex,]
#remove sex column
df2 <- df[, -2]
return(df2)
}
boy <- getSex(freq(),"M")
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
boy <- getSex(freq(),"M")
boy <- getSex(freq,"M")
boy
girl <- getSex(freq,"F")
girl
plot(girl,boy)
help(plot)
plot(girl)
plot(boy)
help(plot)
lines(boy)
lines(girl)
plot(girl)
lines(boy)
help(plot)
plot(boy,colours="blue")
plot(boy,color="blue")
help(colours)
help(blue)
help("blue")
help(plot)
plot(boy,arg(col="blue"))
plot(boy,col="blue")
line(girl,col="pink")
help(line)
plot(boy,col="blue")
line(girl)
lines(girl,col="pink")
lines(girl,col="pink")
plot(boy)
lines(girl,col="pink")
lines(girl)
plot(boy)
lines(girl)
help(plot)
plot(boy)
lines(girl)
girl
plot(girl)
overlay plot
help(plot)
library(graphics)
plot.data.frame(girls)
plot(girl)
plot(freq)
help(plot)
plot(sin, -pi, 2*pi)
help(plot)
plot(girls)
runApp()
plot(girl, col="pink")
lines(boy,col="blue")
runApp()
theName <- "robin"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
namesSorted <- getSorted(names, T)
boy <- getSex(freq,"M")
girl <- getSex(freq,"F")
plot(boy, col="blue")
line(girl, col="pink")
lines(girl, col="pink")
plot(girl, col="pink")
lines(boy, col="blue")
plot(boy,col="blue")
lines(girl,col"pink")
lines(girl,col="pink")
library(ggplot2)
names(freq)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nameOne <- "tom"
nameTwo <- "dick"
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "L"
theSex <- "F"
theName <- "mary"
nameOne <- "tom"
nameTwo <- "dick"
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
df3 <- df2[tolower(df2$name) == tolower(nameOne)&tolower(df2$name) == tolower(nameTwo), ]
df3
df2
names(df2)
df <- babynames
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
df2
df3 <- df2[tolower(df2$name) == tolower(nameOne)&tolower(df2$name) == tolower(nameTwo), ]
df3
startYear
endYear
df2$name
(1=1)&(2=2)
(1==1)&(2==2)
(1==1)&&(2==2)
(1==1)&&(2==3)
(1==1)&(2==3)
nameOne <- tolower(nameOne)
nameTwo <- tolower(nameTwo)
df3 <- df2[(tolower(df2$name) == nameOne) & (tolower(df2$name) == nameTwo), ]
df3
(tolower(df2$name) == nameOne) & (tolower(df2$name) == nameTwo)
df3 <- df2[(tolower(df2$name) == nameOne) | (tolower(df2$name) == nameTwo), ]
df3
runApp()
compareNameTwo <- "dick"
parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
compareNameOne <- "tom"
compareNameOne
compareNameTwo <- "dick"
parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
compare <- parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
ggplot(compare, aes(x=year, y=prop*100,group=name))
names(compare)
head(compare)
ggplot(compare, aes(x=year, y=prop*100,group=name)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100,group=sex)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100)) + geom_line(aes(colour=name))
ggplot(compare, aes(x=year, y=prop*100,group=name)) + geom_line(aes(colour=name))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
babynames$sex
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
theLetters <- ""
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
nrow(df2)
startYear <- 2000
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
startYear <- 2000
nrow(df2)
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
runApp()
runApp()
runApp()
print("parsenames name: ",theLetters)
theLetters
cat("parsenames name: ",theLetters)
if (doDebug) print(cat("parsenames name: ",theLetters))
runApp()
theletters
theLetters
theLetters <- NULL
theLetters
#sex
if is.null(theLetters) theletters <- ""
#sex
if is.null(theLetters) theLetters <- ""
#sex
if is.null(theLetters) {theLetters <- ""}
is.null(theLetters)
#sex
if (is.null(theLetters)) theLetters <- ""
theLetters
runApp()
theSex
startYear
endYear
theLetters
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
runApp()
if (is.null(theLetters)) theLetters <- ""
if (doDebug) print(cat("parsenames name: ",theLetters))
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
theLetters <- mar
theLetters <- "mar"
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
is.null(theLetters)
theLetters
runApp()
runApp()
runApp()
nchar(NULL)
is.character(NULL)
is.character("this")
runApp()
runApp()
theLetters <- NULL
if (is.character(theLetters)) {theLetters <- ""}
theLetters
(is.character(theLetters
if (!is.character(theLetters)) {theLetters <- ""}
if (doDebug) print(cat("parsenames name: ",theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
if (doDebug) print(cat("parsenames name: ",theLetters))
(!is.character(theLetters))
(!is.character(theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
theLetters
if (doDebug) print(cat("parsenames name: ",theLetters))
if (doDebug) print(cat("parsenames name: ",theLetters))
theLetters
"" == NULL
is.null("")
theLetters
(!is.character(theLetters))
theLetters <- NULL
(!is.character(theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
theLetters
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
tolower(substr(df2$name,1,nchar(theLetters)))
theLetters
theLetters <- NULL
tolower(substr(df2$name,1,nchar(theLetters)))
theLetters <- cat("",NULL)
theLetters
tolower(substr(df2$name,1,nchar(theLetters)))
runApp()
runApp()
if (doDebug) print(cat("getSorted, rows: ", nrow(df)))
runApp()
runApp()
namesSorted <- getSorted(names, T)
theLetters <- ""
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
namesSorted <- getSorted(names, T)
namesSorted
namesSorted <- getSorted(theLetters, sortAlpha)
theLetters
theNames
theNames <- parseNames(theSex, startY, endY, theLetters)
theNames <- parseNames(theSex, startYear, endYear, theLetters)
theLetters
namesSorted <- getSorted(theNames, sortAlpha)
namesSorted
runApp()
library(profvis)
profvis(runApp())
install.packages(profvis)
install.packages("profvis)"
install.packages("profvis")
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
namesSorted <- getSorted(names, T)
df <- names
df
unique(df$name
unique <- unique(df$name)
unique
unique2 <- df[!duplicated(df$name)]
!duplicated(df$name)
unique2 <- df[!duplicated(df$name),]
nrow(unique)
unique
nrow(unique)
length(union())
length(unique)
length(unique2)
unique
class(unique)
class(unique2)
head(unique2)
data <- sort(unique)
unique2 <- df[!duplicated(df$name),]
unique2
unique
data <- sort(unique)
data
unique2 <- df[!duplicated(df$name),]$name
unique2
unique
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
options(shiny.reactlog=TRUE)
runApp()
library(profvis)
profvis(runApp())
df
df <- ddply(df, .(name), summarise, qmean = mean(prop))
library(ddply)
install.packages(ddply)
install.packages("ddply")
library(ddply)
libary("ddply")
library("ddply")
library("plyr")
df <- ddply(df, .(name), summarise, qmean = mean(prop))
head(df)
df <- ddply(df, .(name), summarise, prop = mean(prop))
df <- ddply(df, .(name), summarise, qmean = mean(prop))
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "robin"
df <- names
df2 <- ddply(df, .(name), summarise, qmean = mean(prop))
df2
df
df2 <- ddply(df, .(name, sex), summarise, qmean = mean(prop))
df2
df
df2 <- ddply(df, .(name, sex, year), summarise, qmean = mean(prop))
df2
df2 <- ddply(df, .(name), summarise, qmean = mean(prop))
df2
names(df2)
data <- df2[order(df2$qmean,df2$name,decreasing=T),]$name
data
runApp()
options(shiny.reactlog=F)
library(profvis)
profvis(runApp())
runApp()
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
shiny::runApp()
