theName <- "Mary"
freq <- parseFreq (theSex, startYear, endYear, theName)
parseFreq <-function(theLookup, df){
if (doDebug) print("lookupOneName ")
df$rank <- perc.rank(df$prop)
theName <- df[df$name==theLookup,]
theProp <- theName$prop*100
print(theProp)
return(theProp)
}
###########server dup###########
names <-parseNames(theSex, startYear, endYear, theLetters)
names
freq <- parseFreq (theSex, startYear, endYear, theName)
theName
getSorted <- function(df, sortAlpha){
if (doDebug) print("getSorted ")
if (sortAlpha)
data <- unique(sort(df$name))
else {
df <- aggregate(df[c("prop")],  by=df[c("name")], FUN="mean")
df <- df[order(df$prop,df$name,decreasing=T),]
}
return(df)
}
parseNames <-
function(theSex,
startYear,
endYear,
theLetters,
sortAlpha) {
if (doDebug) print("parsenames ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name, 1, nchar(theLetters))) == tolower(theLetters), ]
#aggreagate by name
df4 <- aggregate(df3["prop"],  by = df3["name"], FUN = "mean")
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == tolower(theLetters), ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
return(df3)
}
parseFreq <-
function(theSex,
startYear,
endYear,
theLetters,
sortAlpha) {
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name, 1, nchar(theLetters))) == tolower(theLetters), ]
#aggreagate by name
df4 <- aggregate(df3["prop"],  by = df3["name"], FUN = "mean")
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == tolower(theLetters), ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
return(df6)
}
freq <- parseFreq (theSex, startYear, endYear, theName)
###########server dup###########
names <-parseNames(theSex, startYear, endYear, theLetters)
freq
names
theName
namesSorted <- getSorted(names, T)
namesSorted
namesSorted$name
plot(freq)
startYear <- 1900
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
namesSorted <- getSorted(names, T)
plot(freq)
runApp()
plot(freq)
freq
runApp()
names
mean(name$prop)
mean(names$prop)
runApp()
#global for babynames
library(shiny)
library(babynames)
#setwd("~/ShinyApps/babynames/")
source("cleanNames.R")
doDebug <<- T
getSorted <- function(df, sortAlpha){
if (doDebug) print("getSorted ")
if (sortAlpha)
data <- unique(sort(df$name))
else {
df <- aggregate(df[c("prop")],  by=df[c("name")], FUN="mean")
df <- df[order(df$prop,df$name,decreasing=T),]
}
return(df)
}
parseNames <-
function(theSex,
startYear,
endYear,
theName) {
if (doDebug) print("parsenames ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == theName, ]
#aggreagate by name
df4 <- aggregate(df3["prop"],  by = df3["name"], FUN = "mean")
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theLetters, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
return(df3)
}
parseFreq <-
function(theSex,
startYear,
endYear,
theName) {
if (doDebug) print("parseFreq ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theName, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
return(df6)
}
lookupOneName <-function(theLookup, df){
if (doDebug) print("lookupOneName ")
df$rank <- perc.rank(df$prop)
theName <- df[df$name==theLookup,]
theProp <- theName$prop*100
print(theProp)
return(theProp)
}
#http://stats.stackexchange.com/questions/11924/computing-percentile-rank-in-r
perc.rank <- function(x) trunc(rank(x))/length(x)
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "L"
theSex <- "F"
theName <- "Mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
namesSorted <- getSorted(names, T)
namesSorted$name
plot(freq)
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == theName, ]
theName
#aggreagate by name
df4 <- aggregate(df3["prop"],  by = df3["name"], FUN = "mean")
#aggregate by year (exact match)
df5 <- df3[tolower(df3$name) == theLetters, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
df5
df3
df2
theName
tolower(df2$name)
theName <- "mary"
#string
df3 <- df2[tolower(df2$name) == theName, ]
df3
#aggregate by year (exact match)
df5 <- df3[tolower(df3$name) == theLetters, ]
df5
#aggregate by year (exact match)
df6 <- aggregate(df3["prop"], by = df3[c("year")], FUN = "mean")
df6
return(df6)
runApp()
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theName, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
df6
runApp()
freq
#babynames
server <- shinyServer(function(input, output, session){
names <-eventReactive(input$goNames, {parseNames(input$theSex, input$startYear, input$endYear, isolate(tolower(input$theLetters)))})
freq <- eventReactive(input$goName,  {parseFreq (input$theSex, input$startYear, input$endYear, isolate(tolower(input$theName)))})
namesSorted <- reactive(getSorted(names(), input$sortAlpha))
output$allTheNames <- renderText(namesSorted()$name)
output$nameOverTime <- renderPlot(plot(freq()))
#	output$nameFreq <- renderText(mean(names()$prop))
})
#shiny::runApp('~/ShinyApps/babynames/')
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "L"
theSex <- "F"
theName <- "Mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
namesSorted <- getSorted(names, T)
namesSorted$name
plot(freq)
#global for babynames
library(shiny)
library(babynames)
#setwd("~/ShinyApps/babynames/")
source("cleanNames.R")
doDebug <<- T
getSorted <- function(df, sortAlpha){
if (doDebug) print("getSorted ")
if (sortAlpha)
data <- unique(sort(df$name))
else {
df <- aggregate(df[c("prop")],  by=df[c("name")], FUN="mean")
df <- df[order(df$prop,df$name,decreasing=T),]
}
return(df)
}
parseNames <-
function(theSex,
startYear,
endYear,
theName) {
if (doDebug) print("parsenames ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == theName, ]
#aggregate by year (exact match)
df6 <- aggregate(df3["prop"], by = df3[c("year")], FUN = "mean")
return(df6)
}
parseFreq <-
function(theSex,
startYear,
endYear,
theName) {
if (doDebug) print("parseFreq ")
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theName, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
return(df6)
}
lookupOneName <-function(theLookup, df){
if (doDebug) print("lookupOneName ")
df$rank <- perc.rank(df$prop)
theName <- df[df$name==theLookup,]
theProp <- theName$prop*100
print(theProp)
return(theProp)
}
#http://stats.stackexchange.com/questions/11924/computing-percentile-rank-in-r
perc.rank <- function(x) trunc(rank(x))/length(x)
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "L"
theSex <- "F"
theName <- "Mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
namesSorted <- getSorted(names, T)
namesSorted$name
plot(freq)
runApp()
myBabynames <<- babynames
library(babynames)
runApp()
#sex
df <- babynames[babynames$sex == theSex, ]
#sex
df <- babynames[babynames$sex == theSex, ]
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "L"
theSex <- "F"
theName <- "Mary"
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theName, ]
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
df5
df2
theName
tolower(df2$name)
df2[tolower(df2$name) == theName, ]
theName
runApp()
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
namesSorted <- getSorted(names, T)
theSex
#test
library(shiny)
library(babynames)
source("~/ShinyApps/babynames/cleanNames.R")
startYear
endYear
theLetters
theLetters <- "La"
theLetters
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, theName)
theName
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
freq
namesSorted <- getSorted(names, T)
plot(freq)
#string
df3 <- df2[tolower(df2$name) == theName, ]
df3
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
df2
theName
tolower(df2$name) == theName
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == theName, ]
tolower(df2$name) == theName
df3
theName
theName <- "mary"
#string
df3 <- df2[tolower(df2$name) == theName, ]
df3
#aggregate by year (exact match)
df6 <- aggregate(df3["prop"], by = df3[c("year")], FUN = "mean")
df6
runApp()
names(babynames)
runApp()
length(df2)
names(babynames)
#sex
df <- babynames[babynames$sex == theSex, ]
df
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
df2
print(length(df2))
print(nrow(df2))
print(nrow(df5))
#aggregate by year (exact match)
df5 <- df2[tolower(df2$name) == theName, ]
print(nrow(df5))
df6 <- aggregate(df5["prop"], by = df5[c("year")], FUN = "mean")
df6
runApp()
runApp()
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == tolower(theLetters), ]
#aggregate by year (exact match)
df6 <- aggregate(df3$prop, by = df3[c("year")], FUN = "mean")
df6
runApp()
names(df5)
runApp()
runApp()
runApp()
runApp()
#sex
df <- babynames[babynames$sex == theSex, ]
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "mary"
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == tolower(theLetters), ]
#aggregate by year (exact match)
df6 <- aggregate(df3["prop"], by = df3[c("year")], FUN = "mean")
df6
runApp()
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == tolower(theLetters), ]
#aggregate by year (exact match)
df6 <- aggregate(df3["name"], by = df3[c("year")], FUN = "mean")
df3
runApp()
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(df2$name) == tolower(theLetters), ]
#aggregate by year (exact match)
df4 <- unique(sort(df3$name))
df4
df3
runApp()
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
substr(df$name,1,nchar(letters))
df3 <- df2[tolower(substr(df2$name,1,nchar(letters))) == tolower(theLetters), ]
#aggregate by year (exact match)
df4 <- unique(sort(df3$name))
theLetters
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
#aggregate by year (exact match)
df4 <- unique(sort(df3$name))
df4
runApp()
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
#aggregate by year (exact match)
df4 <- unique(sort(df3$name))
df4
runApp()
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
#aggregate by year (exact match)
df4 <- unique(sort(df3$name))
df4
names(df4)
runApp()
runApp()
runApp()
runApp()
runApp()
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
namesSorted <- getSorted(names, T)
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "mary"
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
namesSorted <- getSorted(names, T)
namesSorted
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name='bravo',
token='1B8EFE23AC58671E3F8D81C5970C4BE1',
secret='<SECRET>')
rsconnect::setAccountInfo(name='bravo',
token='1B8EFE23AC58671E3F8D81C5970C4BE1',
secret='q0xejOQ10PePSBBBNsoRMknnt+R+unGMA2dNhyO5')
namesSorted <- getSorted(theNames, sortAlpha)
deployApp("babynames",appName="babynames")
library(shiny)
install.packages("rsconnect",dependencies=T)
library(rsconnect)
install.packages("rsconnect", dependencies = T)
deployApp("babynames",appName="babynames")
setwd("~/ShinyApps")
library(rsconnect)
library(shiny)
deployApp("babynames",appName="babynames")
