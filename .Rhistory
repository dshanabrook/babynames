compareNameTwo <- "dick"
parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
compareNameOne <- "tom"
compareNameOne
compareNameTwo <- "dick"
parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
compare <- parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
ggplot(compare, aes(x=year, y=prop*100,group=name))
names(compare)
head(compare)
ggplot(compare, aes(x=year, y=prop*100,group=name)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100,group=sex)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100)) + geom_line(aes(colour=sex))
ggplot(compare, aes(x=year, y=prop*100)) + geom_line(aes(colour=name))
ggplot(compare, aes(x=year, y=prop*100,group=name)) + geom_line(aes(colour=name))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
babynames$sex
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
theLetters <- ""
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
nrow(df2)
startYear <- 2000
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
startYear <- 2000
nrow(df2)
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
runApp()
runApp()
runApp()
print("parsenames name: ",theLetters)
theLetters
cat("parsenames name: ",theLetters)
if (doDebug) print(cat("parsenames name: ",theLetters))
runApp()
theletters
theLetters
theLetters <- NULL
theLetters
#sex
if is.null(theLetters) theletters <- ""
#sex
if is.null(theLetters) theLetters <- ""
#sex
if is.null(theLetters) {theLetters <- ""}
is.null(theLetters)
#sex
if (is.null(theLetters)) theLetters <- ""
theLetters
runApp()
theSex
startYear
endYear
theLetters
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
runApp()
if (is.null(theLetters)) theLetters <- ""
if (doDebug) print(cat("parsenames name: ",theLetters))
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
theLetters <- mar
theLetters <- "mar"
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
df3
runApp()
is.null(theLetters)
theLetters
runApp()
runApp()
runApp()
nchar(NULL)
is.character(NULL)
is.character("this")
runApp()
runApp()
theLetters <- NULL
if (is.character(theLetters)) {theLetters <- ""}
theLetters
(is.character(theLetters
if (!is.character(theLetters)) {theLetters <- ""}
if (doDebug) print(cat("parsenames name: ",theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
if (doDebug) print(cat("parsenames name: ",theLetters))
(!is.character(theLetters))
(!is.character(theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
theLetters
if (doDebug) print(cat("parsenames name: ",theLetters))
if (doDebug) print(cat("parsenames name: ",theLetters))
theLetters
"" == NULL
is.null("")
theLetters
(!is.character(theLetters))
theLetters <- NULL
(!is.character(theLetters))
if (!is.character(theLetters)) {theLetters <- ""}
theLetters
#sex
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
tolower(substr(df2$name,1,nchar(theLetters)))
theLetters
theLetters <- NULL
tolower(substr(df2$name,1,nchar(theLetters)))
theLetters <- cat("",NULL)
theLetters
tolower(substr(df2$name,1,nchar(theLetters)))
runApp()
runApp()
if (doDebug) print(cat("getSorted, rows: ", nrow(df)))
runApp()
runApp()
namesSorted <- getSorted(names, T)
theLetters <- ""
df <- babynames[babynames$sex == theSex, ]
#years
df2 <- df[(df$year >= startYear) & (df$year <= endYear), ]
#string
df3 <- df2[tolower(substr(df2$name,1,nchar(theLetters))) == tolower(theLetters), ]
namesSorted <- getSorted(names, T)
namesSorted
namesSorted <- getSorted(theLetters, sortAlpha)
theLetters
theNames
theNames <- parseNames(theSex, startY, endY, theLetters)
theNames <- parseNames(theSex, startYear, endYear, theLetters)
theLetters
namesSorted <- getSorted(theNames, sortAlpha)
namesSorted
runApp()
library(profvis)
profvis(runApp())
install.packages(profvis)
install.packages("profvis)"
install.packages("profvis")
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
namesSorted <- getSorted(names, T)
df <- names
df
unique(df$name
unique <- unique(df$name)
unique
unique2 <- df[!duplicated(df$name)]
!duplicated(df$name)
unique2 <- df[!duplicated(df$name),]
nrow(unique)
unique
nrow(unique)
length(union())
length(unique)
length(unique2)
unique
class(unique)
class(unique2)
head(unique2)
data <- sort(unique)
unique2 <- df[!duplicated(df$name),]
unique2
unique
data <- sort(unique)
data
unique2 <- df[!duplicated(df$name),]$name
unique2
unique
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
options(shiny.reactlog=TRUE)
runApp()
library(profvis)
profvis(runApp())
df
df <- ddply(df, .(name), summarise, qmean = mean(prop))
library(ddply)
install.packages(ddply)
install.packages("ddply")
library(ddply)
libary("ddply")
library("ddply")
library("plyr")
df <- ddply(df, .(name), summarise, qmean = mean(prop))
head(df)
df <- ddply(df, .(name), summarise, prop = mean(prop))
df <- ddply(df, .(name), summarise, qmean = mean(prop))
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "robin"
df <- names
df2 <- ddply(df, .(name), summarise, qmean = mean(prop))
df2
df
df2 <- ddply(df, .(name, sex), summarise, qmean = mean(prop))
df2
df
df2 <- ddply(df, .(name, sex, year), summarise, qmean = mean(prop))
df2
df2 <- ddply(df, .(name), summarise, qmean = mean(prop))
df2
names(df2)
data <- df2[order(df2$qmean,df2$name,decreasing=T),]$name
data
runApp()
options(shiny.reactlog=F)
library(profvis)
profvis(runApp())
runApp()
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
library(profvis)
profvis(runApp())
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(sliderInput)
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("shinysky")
library(shinysky)
devtools::install_github("AnalytixWare/ShinySky")
library(shinysky)
runApp()
install.packages("shinycssloaders")
library(shinycssloaders)
runApp()
install.packages("shinycssloaders")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(magrittr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
startYear <- 1900
endYear <- 2013
theYears <- c(startYear, endYear)
sortAlpha <- F
theLetters <- "La"
theSex <- "F"
theName <- "robin"
df <- names
names <-parseNames(theSex, startYear, endYear, theLetters)
freq <- parseFreq (theSex, startYear, endYear, tolower(theName))
namesSorted <- getSorted(names, T)
compare <- parseTwoNames(compareNameOne,compareNameTwo,startYear, endYear)
ggplot(compare, aes(x=year, y=prop*100,group=name)) + geom_line(aes(colour=name))
#more efficient than unique
data <- sort(df[!duplicated(df$name),]$name)}
#more efficient than unique
data <- sort(df[!duplicated(df$name),]$name)
data
data <- paste(data,"\n",sep="")
data
data <- sort(df[!duplicated(df$name),]$name)
data <- paste(data,"/n",sep="")
runApp()
#more efficient than unique
data <- sort(df[!duplicated(df$name),]$name)
data
runApp()
data <- sort(df[!duplicated(df$name),]$name)
data <- paste(data,"<\b>",sep="")
data
runApp()
runApp()
runApp()
data <- sort(df[!duplicated(df$name),]$name)
data <- as.data.frame(data)
data
runApp()
runApp()
#more efficient than unique
dataList <- sort(df[!duplicated(df$name),]$name)
class(dataList)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
help(headerPanel)
runApp()
runApp()
runApp()
runApp()
library(prenoms)
install.packages("prenoms")
library(prenoms)
data(prenoms)
devtools::install_github( "ThinkR-open/prenoms" )
library("prenoms")
data(prenoms)
names(prenoms)
names(babynames)
head(prenoms)
#devtools::install_github( "ThinkR-open/prenoms" )
install.packages("ukbabynames")
help("ukbabynames")
library(ukbabynames)
help("ukbabynames")
data(ukbabynames)
head(ukbabynames)
head(babynames)
nrow(ukbabynames)
summary(ukbabynames)
names(ukbabynames)
names(pernoms)
names(prenoms)
#[1] "year" "sex"  "name" "n"    "rank"
data(babynames)
names(babynames)
runApp()
runApp()
min(babynames(year))
min(babynames$year)
getYearRange <- function(theNationality){
if (input$theNationality == "france")
{theMin <- min(prenoms$year)
theMax <- max(prenoms$year)}
elseif (input$theNationality == "uk")
{theMin <- min(ukbabynames$year)
theMax <- max(ukbabynames$year)}
elseif (theNationality == "usa")
{theMin <- min(babynames$year)
theMax <- max(babynames$year)}
return(list(theMin,theMax))
}
getYearRange("usa")
getYearRange <- function(theNationality){
if (theNationality == "france")
{theMin <- min(prenoms$year)
theMax <- max(prenoms$year)}
elseif (theNationality == "uk")
{theMin <- min(ukbabynames$year)
theMax <- max(ukbabynames$year)}
elseif (theNationality == "usa")
{theMin <- min(babynames$year)
theMax <- max(babynames$year)}
elseif (theNationality == "scotland")
{theMin <- min(babynames$year)
theMax <- max(babynames$year)}
return(list(theMin,theMax))
}
getYearRange("usa")
getYearRange <- function(theNationality){
if (theNationality == "france")
{theMin <- min(prenoms$year)
theMax <- max(prenoms$year)}
else if (theNationality == "uk")
{theMin <- min(ukbabynames$year)
theMax <- max(ukbabynames$year)}
else if (theNationality == "usa")
{theMin <- min(babynames$year)
theMax <- max(babynames$year)}
else if (theNationality == "scotland")
{theMin <- min(babynames$year)
theMax <- max(babynames$year)}
return(list(theMin,theMax))
}
getYearRange("usa")
getYearRange("france")
getYearRange("uk")
yearRange <- getYearRange("france")
yearRange[1]
read.csv("data/babynames1974_2015.RData")
scottishnames <- read.csv("data/babynames1974_2015.RData")
names(scottishnames)
scottishnames <- read("data/babynames1974_2015.RData")
load("data/babynames1974_2015.RData")
View(scottishnames)
names(babynames1974_2015)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
yearRange <- getYearRange("france")
yearRange[1]
class(yearRange[1])
yearRange[[1]]
class(yearRange[[1]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#[1] "year" "sex"  "name" "n"    "dpt"  "prop"
data(ukbabynames)
help("ukbabynames")
library(ukbabynames)
library(prenoms)
runApp()
